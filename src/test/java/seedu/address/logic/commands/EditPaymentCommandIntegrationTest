package seedu.address.logic.commands;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.time.LocalDate;

import org.junit.jupiter.api.Test;

import seedu.address.commons.core.index.Index;
import seedu.address.logic.commands.EditPaymentCommand.EditPaymentDescriptor;
import seedu.address.logic.commands.exceptions.CommandException;
import seedu.address.model.AddressBook;
import seedu.address.model.Model;
import seedu.address.model.ModelManager;
import seedu.address.model.UserPrefs;
import seedu.address.model.person.Person;
import seedu.address.testutil.PaymentBuilder;
import seedu.address.testutil.PersonBuilder;

public class EditPaymentCommandIntegrationTest {

    @Test
    public void execute_success_editsOnlyTargetPayment() throws Exception {
        var p1 = new PaymentBuilder().withAmount("10.00").withDate("2025-01-01").withRemarks("old").build();
        var p2 = new PaymentBuilder().withAmount("5.50").withDate("2025-01-02").withRemarks("keep").build();
        Person alice = new PersonBuilder().withName("Alice").withPayments(p1, p2).build();

        Model model = new ModelManager(new AddressBook(), new UserPrefs());
        model.addPerson(alice);

        EditPaymentDescriptor d = new EditPaymentDescriptor();
        d.setRemarks("new-remark");

        new EditPaymentCommand(Index.fromOneBased(1), 1, d).execute(model);

        Person updated = model.getFilteredPersonList().get(0);
        assertEquals("new-remark", updated.getPayments().get(0).getRemarks());
        assertEquals("keep", updated.getPayments().get(1).getRemarks());
    }

    @Test
    public void execute_invalidPaymentIndex_throws() {
        var only = new PaymentBuilder().withAmount("10.00").withDate("2025-01-01").build();
        Person bob = new PersonBuilder().withName("Bob").withPayments(only).build();

        Model model = new ModelManager(new AddressBook(), new UserPrefs());
        model.addPerson(bob);

        EditPaymentDescriptor d = new EditPaymentDescriptor();
        d.setDate(LocalDate.parse("2025-02-01"));

        assertThrows(CommandException.class, () ->
                new EditPaymentCommand(Index.fromOneBased(1), 2, d).execute(model));
    }
}
